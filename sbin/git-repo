#!/bin/bash
#
# This script is used to help control repository specific environment setting. It will look for a matching
# repository name and enter a new shell environment and setup a few key environment variables. This can also
# be used to clone a new repository from a git server somewhere and clone a given repository.
#
# The key environment variables that are setup in thie script are as follows:
#	GIT_ROOT - This will define the root level directory where the repository is stored
#	GIT_REPO - This will define the name you wish to use for the repository directory
#	GIT_PATH - This is defined as ${GIT_ROOT}/${GIT_REPO}
#
# These environment variables can then be used with other resource / env scripts to do things like create
# aliases, or setup script locations and such.
#
# The following ENV vars are needed to properly use this script:
#
# WORKSPACES - This variable is a ':' delimited list of directories where to look for a given repositories.
# Example:
#		export WORKSPACES=${HOME}:${HOME}/projects:/public/${USER}/projects
#
# DEFAULT_GIT_SERVER - This is used when cloning a new repository. If not set, the script will query
# for the git server to connect to.
# Example:
#		export DEFAULT_GIT_SERVER=git@github.com
#
# DEFAULT_GIT_REPO - This is used when cloning a new repository. If not set, the script will query
# for the git repository to clone from. This should be of the syntax <user>/<repository>.git
# Example:
#		export DEFAULT_GIT_REPO=raven42/dotfiles.git
#

prog=`basename $0`

# Environment specific definitions
workspaces=${WORKSPACES}
remote_server=${DEFAULT_GIT_SERVER}
remote_repo=${DEFAULT_GIT_REPO}

usage="Usage: $prog [<options>] [<repo>]

 Options:
   -remote-server <url>           - Specify the remote GIT server (default:$remote_server) when cloning
   -remote-repo <repo>            - Specify the remote GIT repo (default:$remote_repo) when cloning
   -workspaces <delimited-paths>  - Specify the workspaces to search for repositories in.
"

# Initialize some defaults
debug=0
repo_match=""
num_paths=0

# Setup our command line options
sopts="hd"
lopts="help,debug,remote-server:,remote-repo:,workspaces:"

optarg=0
opts=`getopt -n $prog -o $sopts -ual $lopts -- $@`
if [ $? != 0 ]; then
	echo ""
	echo "$usage"
	echo ""
	exit 2
fi

eval set -- "$opts"

# Read in command line options
while [ $1 != -- ]; do

	case "$1" in

	--remote-server)
		remote_server=$2
		shift
		;;

	--remote-repo)
		remote_repo=$2
		shift
		;;

	--workspaces)
		workspaces=$2
		shift
		;;

	-d | --debug)
		debug=1
		;;

	-h | --help)
		echo ""
		echo "$usage"
		echo ""
		exit 0
		;;
	esac
	shift
done

# Read in optional arguments
if [ $# -eq 2 ]; then
	git_repo=$2
fi

[ $debug -eq 1 ] && echo "Using git_repo search [${git_repo}]..."
[ $debug -eq 1 ] && echo "Using workspaces [${workspaces}]..."

find_repo()
{
	if [ $# -gt 0 ]; then
		search_param=$1
	else
		search_param=""
	fi
	if [ "$search_param" == "" ]; then
		search_param="."
	fi

	# Check if the search_param is a valid repo itself
	if [ -e ${search_param}/.git ]; then
		[ $debug -eq 1 ] && echo "git repo found at [${search_param}]. Using this path..."
		num_paths=1
		repo_match=${search_param}
		return
	fi

	# If not yet set, get the workspace paths
	if [ "$workspaces" == "" ]; then
		echo "Workspace not specified. Please enter a workspace to search for repositories: "
		read -p "WORKSPACES: " workspaces
	fi

	# If full repo path now found, search for this path in the available workspaces
	for path in `echo $workspaces | tr ':' '\n'`; do
		cd $path
		[ $debug -eq 1 ] && echo "Scanning for [${search_param}] in workspace [${path}]..."
		search=`find ${search_param} -type d -exec test -e '{}/.git' ';' -print -prune 2> /dev/null | sed -e 's|./||g'`
		for subpath in ${search}; do
			[ $debug -eq 1 ] && echo " Found path ${path}/${subpath}..."
			[ $num_paths -gt 0 ] && repo_match+=":"
			let num_paths+=1
			repo_match+="${path}/${subpath}"
		done
	done
}

find_repo $git_repo

[ $debug -eq 1 ] && echo "Found ${num_paths} matching repo locations"

if [ $num_paths -eq 1 ]; then

	repo_path=$repo_match

elif [ $num_paths -gt 1 ]; then

	echo "Multiple repositories found. Please specify which repository."
	echo ""
	echo "${repo_match}" | tr ':' '\n'
	echo ""
	read -p "Please entry repository path: " repo_path

elif [ $num_paths -eq 0 ]; then

	echo ""
	echo "Repository [$git_repo] not found"
	echo ""
	echo "Available repositories:"
	find_repo
	echo "${repo_match}" | tr ':' '\n'
	echo ""
	while true; do
		read -p "Would you like to create a new repository? [y/n]: " yn
		case $yn in
		[Yy]*) break;;
		[Nn]*) exit 1;;
		* ) echo "Please answer yes or no.";;
		esac
	done

	if [ $num_paths -gt 1 ]; then
		echo ""
		echo "Available paths:"
		echo ""
		echo "${workspaces}" | tr ':' '\n'
		echo ""
		read -p "Which path do you want to store the new repo: " git_path
		echo ""
	else
		git_path=$path
	fi

	if [ ! -d ${git_path} ]; then
		echo "GIT path:${git_path} does not exist. Unable to proceed."
		exit 1
	elif [ -d ${git_path}/${git_repo} ]; then
		echo "GIT repo directory [${git_path}/${git_repo}] already exists, but does not have a valid git repository."
		echo "Directory must not exist to create a new repository. Please specify a different path."
		exit 1
	fi

	if [ "${remote_server}" == "" ]; then
		read -p 'Please specify remote git server: ' remote_server
	fi

	if [ "${remote_repo}" == "" ]; then
		read -p 'Please specify remote git repository: ' remote_repo
	fi

	cd ${git_path}
	[ $debug -eq 1 ] && echo "Retrieving remote branches from [${remote_server}:${remote_repo}]..."
	branches=$(git ls-remote --head ${remote_server}:${remote_repo} | sed -e 's|.*refs/heads/||' | grep -v priv)
	if [ $? -ne 0 ]; then
		echo "Error retrieving branch list from remote [${remote_server}:${remote_repo}]"
		echo "Please ensure you have the proper DEFAULT_GIT_SERVER and DEFAULT_GIT_REPO environment variables defined."
		echo ""
		exit 1
	fi
	echo ""
	echo "Available branches:"
	echo ""
	echo "${branches}"
	echo ""
	read -p "Which branch do you want to clone: " branch
	echo ""
	git clone -b ${branch} ${remote_server}:${remote_repo} ${git_repo}
	if [ $? -ne 0 ]; then
		echo "Clone failed. Unable to create repository."
		exit 1
	fi
	echo ""
	repo_path=${git_path}/${git_repo}

else

	echo "Fatal error: Unknown error occured"
	exit 1

fi

[ $debug -eq 1 ] && echo "git_repo specified [${repo_path}]..."

if [[ $repo_path =~ "/" ]]; then
	git_repo=`basename $repo_path`
	git_path=`dirname $repo_path`
else
	git_repo=$repo_path
fi

git_root=${git_path}/${git_repo}

env_args="GIT_ROOT=${git_root} GIT_PATH=`dirname ${git_root}` GIT_REPO=`basename ${git_root}` GIT_DIR=${git_root}/.git GIT_WORK_TREE=${git_root} ${SHELL}"

[ $debug -eq 1 ] && echo "env_args [$env_args]"

cd $git_root
env $env_args ; exit

exit 0
